
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Emoji {
  id        String   @id @default(uuid()) @db.Uuid
  studyId   String   @db.Uuid
  emojiType String?  @db.VarChar(255)
  count     Int?
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp

  // Relations
  study Study @relation(fields: [studyId], references: [id])

  @@index([studyId])
}

model Study {
  id             String   @id @default(uuid()) @db.Uuid
  nickName       String   @db.VarChar(15)
  studyName      String   @db.VarChar(40)
  description    String?  @db.VarChar(2000)
  backgroundImg  String?  @db.VarChar(40)
  password       String   @db.VarChar(255)
  createdAt      DateTime @default(now()) @db.Timestamp
  updatedAt      DateTime @updatedAt @db.Timestamp

  // Relations
  habits      Habit[]
  focuses     Focus[]
  points      Point[]
  emojis      Emoji[]
  habitChecks HabitCheck[]
}

model Focus {
  id          String   @id @default(uuid()) @db.Uuid
  studyId     String   @db.Uuid
  time        Int      @default(0)
  createdAt   DateTime @default(now()) @db.Timestamp
  updatedAt   DateTime @updatedAt @db.Timestamp

  // Relations
  study Study @relation(fields: [studyId], references: [id])

  @@index([studyId])
}

model Habit {
  id        String    @id @default(uuid()) @db.Uuid
  studyId   String    @db.Uuid
  password  String    @db.VarChar(255)
  name      String    @db.VarChar(100)
  startDate DateTime  @db.Date // DB에는 Date 타입으로 저장됨
  endDate   DateTime? @db.Date // DB에는 Date 타입으로 저장됨
  createdAt DateTime  @default(now()) @db.Timestamp
  updatedAt DateTime  @updatedAt @db.Timestamp

  // Relations
  study Study @relation(fields: [studyId], references: [id])
  habitChecks HabitCheck[]

  @@index([studyId])
}

model HabitCheck {
  id          String   @id @default(uuid()) @db.Uuid
  habitId     String   @db.Uuid
  pointId     String   @db.Uuid
  studyId     String   @db.Uuid
  isCompleted Boolean  @default(false)
  checkDate   DateTime @db.Date // DB에는 Date 타입으로 저장됨
  createdAt   DateTime @default(now()) @db.Timestamp
  updatedAt   DateTime @updatedAt @db.Timestamp

  // Relations
  habit Habit @relation(fields: [habitId], references: [id])
  point Point @relation(fields: [pointId], references: [id])
  study Study @relation(fields: [studyId], references: [id])

  @@index([studyId])
}

model Point {
  id        String   @id @default(uuid()) @db.Uuid
  studyId   String   @db.Uuid
  point     Int      @default(0)
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp

  // Relations
  study Study @relation(fields: [studyId], references: [id])
  habitChecks HabitCheck[]

  @@index([studyId])
}
